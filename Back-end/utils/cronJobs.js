const cron = require('node-cron');
const Notification = require('../models/Notification');
const User = require('../models/User');
const Interview = require('../models/Interview');
const nodemailer = require('nodemailer');

// C·∫•u h√¨nh Nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD
  }
});

// G·ª≠i th√¥ng b√°o m·ªói ng√†y v√†o 8h s√°ng
cron.schedule('0 8 * * *', async () => {
  console.log('üöÄ Sending daily notifications...');

  try {
    const notifications = await Notification.find({ status: 'unread' }).populate('userId');

    for (const notification of notifications) {
      const mailOptions = {
        to: notification.userId.email,
        from: process.env.EMAIL_USER,
        subject: 'You have unread notifications!',
        text: notification.content
      };

      await transporter.sendMail(mailOptions);
      notification.status = 'read';
      await notification.save();
    }

    console.log('‚úÖ Notifications sent successfully');
  } catch (err) {
    console.error('‚ùå Error sending notifications:', err);
  }
});

// Ki·ªÉm tra v√† g·ª≠i email th√¥ng b√°o cho c√°c s·ª± ki·ªán s·∫Øp di·ªÖn ra
cron.schedule('* * * * *', async () => {
  console.log('üîç Checking upcoming events...');

  try {
    const now = new Date();
    
    // T√¨m t·∫•t c·∫£ c√°c s·ª± ki·ªán ch∆∞a ƒë∆∞·ª£c g·ª≠i th√¥ng b√°o
    const events = await Interview.find({
      startTime: { $gt: now },
      notificationSent: { $ne: true }
    }).populate('candidate').populate('attendees');

    for (const event of events) {
      const eventStartTime = new Date(event.startTime);
      const notificationTime = new Date(eventStartTime.getTime() - (event.beforeEvent * 60000)); // Chuy·ªÉn ph√∫t th√†nh milliseconds
      
      // N·∫øu ƒë√£ ƒë·∫øn th·ªùi gian g·ª≠i th√¥ng b√°o
      if (now >= notificationTime) {
        // Chu·∫©n b·ªã danh s√°ch ng∆∞·ªùi nh·∫≠n
        const recipients = [];
        
        // Th√™m email c·ªßa ·ª©ng vi√™n
        if (event.candidate && event.candidate.email) {
          recipients.push(event.candidate.email);
        }
        
        // Th√™m email c·ªßa ng∆∞·ªùi tham d·ª±
        if (event.attendees && event.attendees.length > 0) {
          event.attendees.forEach(attendee => {
            if (attendee.email) {
              recipients.push(attendee.email);
            }
          });
        }

        if (recipients.length > 0) {
          // T·∫°o n·ªôi dung email
          const mailOptions = {
            from: process.env.EMAIL_USER,
            to: recipients.join(', '),
            subject: `Th√¥ng b√°o s·ª± ki·ªán: ${event.title}`,
            html: `
              <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <h2 style="color: #333;">Th√¥ng b√°o s·ª± ki·ªán s·∫Øp di·ªÖn ra</h2>
                <p>Xin ch√†o,</p>
                <p>S·ª± ki·ªán <strong>${event.title}</strong> s·∫Ω b·∫Øt ƒë·∫ßu sau ${event.beforeEvent} ph√∫t.</p>
                <p><strong>Th·ªùi gian:</strong> ${new Date(event.startTime).toLocaleString('vi-VN')}</p>
                <p><strong>H√¨nh th·ª©c:</strong> ${event.eventType === 'online' ? 'Online' : 'Offline'}</p>
                ${event.location ? `<p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${event.location}</p>` : ''}
                ${event.description ? `<p><strong>M√¥ t·∫£:</strong> ${event.description}</p>` : ''}
                <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© JHR</p>
              </div>
            `
          };

          // G·ª≠i email
          await transporter.sendMail(mailOptions);
          
          // ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng b√°o
          event.notificationSent = true;
          await event.save();
          
          console.log(`‚úÖ Notification sent for event: ${event.title}`);
        }
      }
    }
  } catch (err) {
    console.error('‚ùå Error checking upcoming events:', err);
  }
});
