import React, { useState, useEffect } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { Form, Input, Button, message, Select, Upload, Layout } from 'antd';
import { SendOutlined, InboxOutlined, ArrowLeftOutlined } from '@ant-design/icons';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import axios from 'axios';
import moment from 'moment';
import 'moment/locale/vi';

const { Dragger } = Upload;
const { Content } = Layout;
moment.locale('vi');

const SendEmail = () => {
  const [form] = Form.useForm();
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const [loading, setLoading] = useState(false);
  const [fileList, setFileList] = useState([]);
  const [emailContent, setEmailContent] = useState('');
  const [upcomingInterview, setUpcomingInterview] = useState(null);

  // Quill modules configuration
  const modules = {
    toolbar: [
      [{ 'header': [1, 2, 3, false] }],
      ['bold', 'italic', 'underline', 'strike'],
      [{ 'color': [] }, { 'background': [] }],
      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
      [{ 'align': [] }],
      ['link'],
      ['clean']
    ],
  };

  const formats = [
    'header',
    'bold', 'italic', 'underline', 'strike',
    'color', 'background',
    'list', 'bullet',
    'align',
    'link'
  ];

  // H√†m chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ·ª©ng vi√™n
  const getStatusText = (stage) => {
    const texts = {
      'new': 'M·ªõi',
      'reviewing': 'ƒêang xem x√©t',
      'interview1': 'Ph·ªèng v·∫•n v√≤ng 1',
      'interview2': 'Ph·ªèng v·∫•n v√≤ng 2',
      'offer': 'ƒê·ªÅ xu·∫•t',
      'hired': 'ƒê√£ tuy·ªÉn',
      'rejected': 'T·ª´ ch·ªëi'
    };
    return texts[stage] || stage;
  };

  useEffect(() => {
    const fetchCandidateData = async () => {
      if (!id) return; // N·∫øu kh√¥ng c√≥ id, kh√¥ng fetch data

      try {
        const token = localStorage.getItem('token');
        
        // L·∫•y th√¥ng tin ·ª©ng vi√™n
        const candidateResponse = await axios.get(`http://localhost:8000/api/candidates/${id}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        // L·∫•y th√¥ng tin ph·ªèng v·∫•n
        const interviewResponse = await axios.get(`http://localhost:8000/api/interviews/candidate/${id}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        if (candidateResponse.data && candidateResponse.data.candidate) {
          const candidate = candidateResponse.data.candidate;
          
          // L∆∞u th√¥ng tin ph·ªèng v·∫•n n·∫øu c√≥
          if (interviewResponse.status === 200 && interviewResponse.data.length > 0) {
            setUpcomingInterview(interviewResponse.data[0]);
          }
          
          // L·∫•y th√¥ng tin HR t·ª´ localStorage
          const userString = localStorage.getItem('user');
          const user = userString ? JSON.parse(userString) : null;
          const hrName = user?.fullName || '[t√™n HR]';
          const hrPhone = user?.phone || '[SDT]';
          
          // T·∫°o n·ªôi dung email m·∫´u
          const emailContent = candidate.stage === 'rejected' 
            ? `<div style="font-family: Arial, sans-serif;">
<h3 style="text-align: center; margin-bottom: 20px;">TH∆Ø C·∫¢M ∆†N ${candidate.name || '[H·ªå T√äN ·ª®NG VI√äN]'} ·ª®NG TUY·ªÇN ${candidate.position || '[V·ªä TR√ç TUY·ªÇN D·ª§NG]'}</h3>

<p>K√≠nh g·ª≠i: ${candidate.name || '[anh/ch·ªã] [h·ªç t√™n ·ª©ng vi√™n]'},</p>

<p>H·ªôi ƒë·ªìng Tuy·ªÉn d·ª•ng v√† Ban l√£nh ƒë·∫°o Rikkei Academy g·ª≠i l·ªùi c·∫£m ∆°n ƒë·∫øn ${candidate.name || '[Anh/Ch·ªã]'} v√¨ ƒë√£ quan t√¢m v√† d√†nh th·ªùi gian ·ª©ng tuy·ªÉn v·ªã tr√≠ ${candidate.position || '[T√™n v·ªã tr√≠ ·ª©ng tuy·ªÉn]'}.</p>

<p>Sau khi xem x√©t, Rikkei Academy ƒë√£ ƒë·ªëi t∆∞·ª£ng v·ªõi h·ªì s∆° ·ª©ng tuy·ªÉn c·ªßa ${candidate.name || '[Anh/Ch·ªã]'}, tuy nhi√™n do m·ªôt s·ªë ƒëi·ªÉm ch∆∞a ph√π h·ª£p, ch√∫ng t√¥i r·∫•t ti·∫øc v√¨ ch∆∞a th·ªÉ h·ª£p t√°c v·ªõi ${candidate.name || '[Anh/Ch·ªã]'} trong th·ªùi gian n√†y.</p>

<p>DTS xin ph√©p l∆∞u h·ªì s∆° c·ªßa ${candidate.name || '[Anh/Ch·ªã]'} cho nh·ªØng c∆° h·ªôi kh√°c trong t∆∞∆°ng lai. ${candidate.name || '[Anh/Ch·ªã]'} c√≥ th·ªÉ gi·ªØ li√™n l·∫°c v·ªõi ch√∫ng t√¥i v√† c·∫≠p nh·∫≠t nh·ªØng th√¥ng tin ngh·ªÅ nghi·ªáp m·ªõi nh·∫•t t·∫°i Tuy·ªÉn d·ª•ng DTS.</p>

<p>M·ªôt l·∫ßn n·ªØa r·∫•t c√°m ∆°n s·ª± quan t√¢m, th·ªùi gian v√† n·ªó l·ª±c c·ªßa ${candidate.name || '[Anh/Ch·ªã]'}. Ch√∫c ${candidate.name || '[Anh/Ch·ªã]'} g·∫∑t h√°i nhi·ªÅu th√†nh c√¥ng trong s·ª± nghi·ªáp t∆∞∆°ng lai.</p>

<p>Tr√¢n tr·ªçng c·∫£m ∆°n,</p>
<p>TM. H·ªòI ƒê·ªíNG TUY·ªÇN D·ª§NG</p>
</div>`
            : `Th√¢n g·ª≠i ${candidate.name || '[h·ªç t√™n ·ª©ng vi√™n]'},

C√¥ng ty TNHH Rikkei Education (Rikkei) r·∫•t c·∫£m ∆°n B·∫°n ƒë√£ quan t√¢m ·ª©ng tuy·ªÉn v√†o v·ªã tr√≠: ${candidate.position || '[t√™n v·ªã tr√≠ tuy·ªÉn d·ª•ng]'}

Tr√¢n tr·ªçng m·ªùi B·∫°n tham d·ª± bu·ªïi ph·ªèng v·∫•n t·∫°i Rikkei theo th√¥ng tin chi ti·∫øt nh∆∞ sau:

‚úî Th·ªùi gian: ${upcomingInterview ? moment(upcomingInterview.startTime).format('HH:mm, DD/MM/YYYY') : '[th·ªùi gian ph·ªèng v·∫•n]'}
‚úî ƒê·ªãa ƒëi·ªÉm: T·∫ßng 7 th√°p A t√≤a S√¥ng ƒê√†, ƒë∆∞·ªùng Ph·∫°m H√πng, qu·∫≠n Nam T·ª´ Li√™m, H√† N·ªôi
‚úî H√¨nh th·ª©c ph·ªèng v·∫•n: Tr·ª±c ti·∫øp
‚úî Th·ªùi l∆∞·ª£ng: 30 - 45 ph√∫t
‚úî Ng∆∞·ªùi li√™n h·ªá: ${hrName} ‚Äì ${hrPhone}

üîπ B·∫°n vui l√≤ng ph·∫£n h·ªìi l·∫°i email ƒë·ªÉ x√°c nh·∫≠n tham gia ph·ªèng v·∫•n.
üîπ C√°m ∆°n B·∫°n ƒë√£ s·∫Øp x·∫øp ƒë·ªÉ c√≥ bu·ªïi trao ƒë·ªïi n√†y. Ch√∫c B·∫°n c√≥ m·ªôt bu·ªïi ph·ªèng v·∫•n th√†nh c√¥ng!

Tr√¢n tr·ªçng,

TM. H·ªòI ƒê·ªíNG TUY·ªÇN D·ª§NG`;

          form.setFieldsValue({
            to: candidate.email,
            subject: candidate.stage === 'rejected'
              ? `[RIKKEI ACADEMY] TH∆Ø T·ª™ CH·ªêI _ ${candidate.name} _ ${candidate.position}`
              : `[RIKKEI ACADEMY] TH∆Ø M·ªúI ${candidate.name} CH·ª®C V·ª§ ·ª®NG TUY·ªÇN ${candidate.position} GIAI ƒêO·∫†N ${getStatusText(candidate.stage)}`,
            content: emailContent
          });
        }
      } catch (error) {
        console.error('Error fetching candidate data:', error);
        message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ·ª©ng vi√™n');
      }
    };

    fetchCandidateData();
  }, [id, form]);

  // File upload configuration
  const uploadProps = {
    name: 'attachments',
    multiple: true,
    fileList: fileList,
    beforeUpload: (file) => {
      const isLt10M = file.size / 1024 / 1024 < 10;
      if (!isLt10M) {
        message.error('File ph·∫£i nh·ªè h∆°n 10MB!');
        return Upload.LIST_IGNORE;
      }
      return false; // Prevent auto upload
    },
    onChange: (info) => {
      setFileList(info.fileList);
    },
    onRemove: (file) => {
      const index = fileList.indexOf(file);
      const newFileList = fileList.slice();
      newFileList.splice(index, 1);
      setFileList(newFileList);
    },
  };

  const handleSubmit = async (values) => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      // Create FormData for file upload
      const formData = new FormData();
      formData.append('to', values.to);
      
      // Handle CC emails
      if (values.cc && values.cc.length > 0) {
        formData.append('cc', values.cc.join(','));
      }
      
      // Handle BCC emails
      if (values.bcc && values.bcc.length > 0) {
        formData.append('bcc', values.bcc.join(','));
      }
      
      formData.append('subject', values.subject);
      formData.append('content', values.content || '');
      
      // Append files if any
      if (fileList && fileList.length > 0) {
        fileList.forEach((file) => {
          formData.append('attachments', file.originFileObj);
        });
      }

      const response = await axios.post('http://localhost:8000/api/emails/send', formData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'multipart/form-data',
        }
      });

      if (response.status === 200) {
        message.success('Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
        if (location.pathname.includes('/candidates/')) {
          navigate(`/candidates/${id}`);
        } else {
          navigate('/emails');
        }
      }
    } catch (error) {
      console.error('Error sending email:', error);
      const errorMessage = error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i email';
      message.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-[#F9FAFB] p-4 ml-[282px]">
      <div className="max-w-[1200px] mx-auto bg-white rounded-lg p-6 mt-[80px]">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <Button 
              icon={<ArrowLeftOutlined />} 
              onClick={() => navigate(id ? `/candidates/${id}` : '/emails')}
              className="border-none"
            >
              Quay l·∫°i
            </Button>
            <h1 className="text-[20px] font-medium text-[#1A1A1A] m-0">Th∆∞ m·ªõi</h1>
          </div>
        </div>

        {/* Email Form */}
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          className="bg-white rounded-lg"
        >
          {/* Recipients */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-center">
              <span className="w-20 text-[#666]">ƒê·∫øn:</span>
              <Form.Item 
                name="to" 
                className="mb-0 flex-1"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p email ng∆∞·ªùi nh·∫≠n' }]}
              >
                <Input 
                  variant="borderless"
                  readOnly={!!id}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email ng∆∞·ªùi nh·∫≠n"
                />
              </Form.Item>
            </div>
          </div>

          {/* CC */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-center">
              <span className="w-20 text-[#666]">CC:</span>
              <Form.Item name="cc" className="mb-0 flex-1">
                <Select
                  mode="tags"
                  style={{ width: '100%' }}
                  placeholder="Nh·∫≠p email CC"
                  tokenSeparators={[',']}
                  variant="borderless"
                />
              </Form.Item>
            </div>
          </div>

          {/* BCC */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-center">
              <span className="w-20 text-[#666]">BCC:</span>
              <Form.Item name="bcc" className="mb-0 flex-1">
                <Select
                  mode="tags"
                  style={{ width: '100%' }}
                  placeholder="Nh·∫≠p email BCC"
                  tokenSeparators={[',']}
                  variant="borderless"
                />
              </Form.Item>
            </div>
          </div>

          {/* Subject */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-center">
              <span className="w-20 text-[#666]">Ti√™u ƒë·ªÅ:</span>
              <Form.Item 
                name="subject" 
                className="mb-0 flex-1"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ' }]}
              >
                <Input 
                  variant="borderless"
                  readOnly={!!id}
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ email"
                />
              </Form.Item>
            </div>
          </div>

          {/* File Upload */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-start">
              <span className="w-20 text-[#666] mt-2">ƒê√≠nh k√®m:</span>
              <div className="flex-1">
                <Upload {...uploadProps}>
                  <Button icon={<InboxOutlined />}>Ch·ªçn file</Button>
                </Upload>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="p-4">
            <Form.Item
              name="content"
              rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p n·ªôi dung email' }]}
            >
              <ReactQuill 
                theme="snow"
                value={emailContent}
                onChange={setEmailContent}
                modules={modules}
                formats={formats}
                style={{ 
                  height: '300px',
                  marginBottom: '50px'
                }}
              />
            </Form.Item>
          </div>

          {/* Actions */}
          <div className="flex justify-end gap-4 mt-8">
            <Button onClick={() => navigate(-1)}>
              H·ªßy
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              icon={<SendOutlined />}
              loading={loading}
              className="bg-[#1890ff]"
            >
              G·ª≠i
            </Button>
          </div>
        </Form>
      </div>
    </div>
  );
};

export default SendEmail; 