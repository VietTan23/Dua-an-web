import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Input, Button, message, Layout } from 'antd';
import { ArrowLeftOutlined, SendOutlined, SaveOutlined } from '@ant-design/icons';
import axios from 'axios';
import moment from 'moment';
import 'moment/locale/vi';

const { Content } = Layout;
moment.locale('vi');

const SendEmail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [emailData, setEmailData] = useState({
    to: '',
    subject: '',
    content: ''
  });

  useEffect(() => {
    const fetchCandidateData = async () => {
      if (!id) return; // N·∫øu kh√¥ng c√≥ id, kh√¥ng fetch data

      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`http://localhost:8000/api/candidates/${id}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        if (response.data && response.data.candidate) {
          const candidate = response.data.candidate;
          
          // T·∫°o n·ªôi dung email m·∫´u
          const emailContent = `TH∆Ø M·ªúI THAM D·ª∞ [GIAI ƒêO·∫†N TUY·ªÇN D·ª§NG]

K√≠nh g·ª≠i: [anh/ch·ªã] ${candidate.name || '[h·ªç t√™n ·ª©ng vi√™n]'},

H·ªôi ƒë·ªìng Tuy·ªÉn d·ª•ng v√† Ban l√£nh ƒë·∫°o Rikkei Academy xin g·ª≠i t·ªõi [Anh/Ch·ªã] l·ªùi ch√†o v√† l·ªùi ch√∫c s·ª©c kh·ªèe!
Qua th√¥ng tin t√¨m hi·ªÉu s∆° b·ªô, ch√∫ng t√¥i nh·∫≠n th·∫•y [Anh/Ch·ªã] ph√π h·ª£p v·ªõi y√™u c·∫ßu v·ªã tr√≠ ${candidate.position || '[t√™n v·ªã tr√≠ tuy·ªÉn d·ª•ng]'}.
ƒê·ªÉ c√≥ th·ªÉ trao ƒë·ªïi chi ti·∫øt h∆°n v·ªÅ c√¥ng vi·ªác, c≈©ng nh∆∞ ƒë√°nh gi√° ch√≠nh x√°c h∆°n ki·∫øn th·ª©c v√† nƒÉng l·ª±c c·ªßa [Anh/Ch·ªã],
ch√∫ng t√¥i k√≠nh m·ªùi [Anh/Ch·ªã] tham gia bu·ªïi tuy·ªÉn d·ª•ng v·ªõi th√¥ng tin nh∆∞ sau:

V·ªã tr√≠ tuy·ªÉn d·ª•ng: ${candidate.position || '[t√™n v·ªã tr√≠ tuy·ªÉn d·ª•ng]'}

Th·ªùi gian: 09:00, Th·ª© 3, ng√†y 01/10/2024

H√¨nh th·ª©c: Online (Link) / Offline: T·∫ßng 7, kh·ªëi A, t√≤a nh√† S√¥ng ƒê√†, Ph·∫°m H√πng, Nam T·ª´ Li√™m, HN

Ng∆∞·ªùi li√™n h·ªá: [t√™n HR] ‚Äì [SDT]

ƒê·∫øn v·ªõi Rikkei Academy h·ªçc vi√™n s·∫Ω ƒë∆∞·ª£c ƒë√†o t·∫°o theo tri·∫øt l√Ω 4T ƒë·ªôc quy·ªÅn (Tin c·∫≠y ‚Äì Th·ª±c ti·ªÖn ‚Äì Tinh g·ªçn ‚Äì T·∫≠n t√¢m):
‚úî Tin c·∫≠y: Rikkei Academy cam k·∫øt l√† h·ªçc vi·ªán ƒë√†o t·∫°o ƒë√°ng tin c·∫≠y, uy t√≠n ƒë·ªëi v·ªõi h·ªçc vi√™n. Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ƒë∆∞·ª£c nghi√™n c·ª©u k·ªπ l∆∞·ª°ng b·ªüi chuy√™n gia, gi√∫p h·ªçc vi√™n c√≥ ƒë·∫ßy ƒë·ªß ki·∫øn th·ª©c chu·∫©n v√† c·∫ßn thi·∫øt cho ng√†nh h·ªçc c·ªßa m√¨nh.

‚úî Th·ª±c ti·ªÖn: Chuy√™n gia t·∫°i Rikkei Academy kh√¥ng ng·ª´ng h·ªçc h·ªèi, c·∫≠p nh·∫≠t c√¥ng ngh·ªá v√† ki·∫øn th·ª©c m·ªõi ƒë·ªÉ ƒë∆∞a ra ch∆∞∆°ng tr√¨nh h·ªçc th·ª±c ti·ªÖn, b√°m s√°t nhu c·∫ßu th·ªã tr∆∞·ªùng ƒë·ªÉ ƒë√†o t·∫°o h·ªçc vi√™n.

‚úî Tinh g·ªçn: Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o c·ªßa Rikkei Academy ƒë∆∞·ª£c thi·∫øt k·∫ø tinh g·ªçn, ƒë·∫ßy ƒë·ªß ki·∫øn th·ª©c c·∫ßn thi·∫øt v√† ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô c·ªßa t·ª´ng h·ªçc vi√™n ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng, k·∫øt qu·∫£ ƒë·∫ßu ra.

‚úî T·∫≠n t√¢m: Gi·∫£ng vi√™n, tr·ª£ gi·∫£ng t·∫°i Rikkei Academy lu√¥n t·∫≠n t√¢m ƒë·ªÉ h·ªó tr·ª£, chia s·∫ª, k·∫øt n·ªëi v·ªõi h·ªçc vi√™n qua nh·ªØng c√¢u chuy·ªán ngh·ªÅ, h·ªó tr·ª£ li√™n t·ª•c v√† mang ƒë·∫øn k·ªπ thu·∫≠t ƒë·∫∑t c√¢u h·ªèi n√¢ng cao t∆∞ duy ph·∫£n bi·ªán c·ªßa h·ªçc vi√™n, gi√∫p h·ªçc vi√™n th·∫•y h·ª©ng th√∫ v√† c√≥ ƒë·ªông l·ª±c ƒë·ªÉ theo ƒëu·ªïi ngh·ªÅ.

T√¨m hi·ªÉu th√™m v·ªÅ Rikkei Academy t·∫°i:
üîπ Fanpage Rikkei Academy: [Link]
üîπ Fanpage Tuy·ªÉn d·ª•ng Rikkei Academy: [Link]
üîπ Website Tuy·ªÉn d·ª•ng Rikkei Academy: [Link]

Tr√¢n tr·ªçng c·∫£m ∆°n,
TM. H·ªòI ƒê·ªíNG TUY·ªÇN D·ª§NG`;

          setEmailData({
            to: candidate.email,
            subject: `[RIKKEI ACADEMY] TH∆Ø M·ªúI [GIAI ƒêO·∫†N TUY·ªÇN D·ª§NG]_[${candidate.position}]_[${candidate.name}]`,
            content: emailContent
          });
        }
      } catch (error) {
        console.error('Error fetching candidate data:', error);
        message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ·ª©ng vi√™n');
      }
    };

    fetchCandidateData();
  }, [id]);

  const handleSendEmail = async () => {
    if (!emailData.to || !emailData.subject || !emailData.content) {
      message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin email');
      return;
    }

    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      await axios.post('http://localhost:8000/api/emails/send', emailData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      message.success('Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
      navigate(id ? `/candidates/${id}` : '/emails');
    } catch (error) {
      console.error('Error sending email:', error);
      message.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i email');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field) => (e) => {
    setEmailData(prev => ({
      ...prev,
      [field]: e.target.value
    }));
  };

  return (
    <Layout>
      <Layout style={{ marginLeft: 282 }}>
        <Content style={{ margin: '80px 16px 24px', background: '#F5F5F5', minHeight: 280 }}>
          <div style={{ 
            maxWidth: '1200px', 
            margin: '0 auto',
            height: 'calc(100vh - 120px)',
            display: 'flex',
            flexDirection: 'column',
            gap: '16px'
          }}>
            {/* Header */}
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              padding: '8px 0'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                <Button 
                  icon={<ArrowLeftOutlined />} 
                  onClick={() => navigate(id ? `/candidates/${id}` : '/emails')}
                  style={{ border: 'none' }}
                >
                  Quay l·∫°i
                </Button>
                <h2 style={{ margin: 0 }}>Th∆∞ m·ªõi</h2>
              </div>
              <div style={{ display: 'flex', gap: '8px' }}>
                <Button
                  type="primary"
                  icon={<SendOutlined />}
                  loading={loading}
                  onClick={handleSendEmail}
                >
                  G·ª≠i
                </Button>
              </div>
            </div>

            {/* Email Form */}
            <div style={{
              background: 'white',
              borderRadius: '8px',
              flex: 1,
              display: 'flex',
              flexDirection: 'column',
              boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)'
            }}>
              {/* Recipients */}
              <div style={{ 
                padding: '12px 24px',
                borderBottom: '1px solid #f0f0f0',
                display: 'flex',
                alignItems: 'center'
              }}>
                <span style={{ width: '80px', color: '#666' }}>ƒê·∫øn:</span>
                <Input 
                  value={emailData.to}
                  onChange={handleInputChange('to')}
                  bordered={false}
                  style={{ flex: 1 }}
                  readOnly={!!id}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email ng∆∞·ªùi nh·∫≠n"
                />
              </div>

              {/* Subject */}
              <div style={{ 
                padding: '12px 24px',
                borderBottom: '1px solid #f0f0f0',
                display: 'flex',
                alignItems: 'center'
              }}>
                <span style={{ width: '80px', color: '#666' }}>Ti√™u ƒë·ªÅ:</span>
                <Input 
                  value={emailData.subject}
                  onChange={handleInputChange('subject')}
                  bordered={false}
                  style={{ flex: 1 }}
                  readOnly={!!id}
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ email"
                />
              </div>

              {/* Content */}
              <div style={{ flex: 1, padding: '24px' }}>
                <Input.TextArea
                  value={emailData.content}
                  onChange={handleInputChange('content')}
                  style={{ 
                    height: '100%', 
                    resize: 'none',
                    border: 'none',
                    padding: 0
                  }}
                  bordered={false}
                  placeholder="Nh·∫≠p n·ªôi dung email"
                />
              </div>
            </div>
          </div>
        </Content>
      </Layout>
    </Layout>
  );
};

export default SendEmail; 