import React, { useState, useEffect } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { Form, Input, Button, message, Select, Upload, Layout, Table, Modal } from 'antd';
import { SendOutlined, InboxOutlined, ArrowLeftOutlined } from '@ant-design/icons';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import axios from 'axios';
import moment from 'moment';
import 'moment/locale/vi';

const { Dragger } = Upload;
const { Content } = Layout;
moment.locale('vi');

const SendEmail = () => {
  const [form] = Form.useForm();
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const [loading, setLoading] = useState(false);
  const [fileList, setFileList] = useState([]);
  const [emailContent, setEmailContent] = useState('');
  const [upcomingInterview, setUpcomingInterview] = useState(null);
  const [candidate, setCandidate] = useState(null);
  const [sendCount, setSendCount] = useState(0);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [pendingSubmit, setPendingSubmit] = useState(null);
  const [hrInfo, setHrInfo] = useState({ name: '[t√™n HR]', phone: '[SDT]' });

  // Quill modules configuration
  const modules = {
    toolbar: [
      [{ 'header': [1, 2, 3, false] }],
      ['bold', 'italic', 'underline', 'strike'],
      [{ 'color': [] }, { 'background': [] }],
      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
      [{ 'align': [] }],
      ['link', 'table'],
      ['clean']
    ],
  };

  const formats = [
    'header',
    'bold', 'italic', 'underline', 'strike',
    'color', 'background',
    'list', 'bullet',
    'align',
    'link',
    'table', 'td', 'tr', 'th'
  ];

  // H√†m chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ·ª©ng vi√™n
  const getStatusText = (stage) => {
    const texts = {
      'new': 'M·ªõi',
      'reviewing': 'ƒêang xem x√©t',
      'interview1': 'Ph·ªèng v·∫•n v√≤ng 1',
      'interview2': 'Ph·ªèng v·∫•n v√≤ng 2',
      'offer': 'ƒê·ªÅ xu·∫•t',
      'hired': 'ƒê√£ tuy·ªÉn',
      'rejected': 'T·ª´ ch·ªëi'
    };
    return texts[stage] || stage;
  };

  useEffect(() => {
    const fetchCandidateData = async () => {
      if (!id) return;

      try {
        const token = localStorage.getItem('token');
        
        // L·∫•y th√¥ng tin ·ª©ng vi√™n
        const candidateResponse = await axios.get(`http://localhost:8000/api/candidates/${id}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        // L·∫•y th√¥ng tin ph·ªèng v·∫•n
        const interviewResponse = await axios.get(`http://localhost:8000/api/interviews/candidate/${id}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        console.log('Interview response:', interviewResponse.data);

        if (candidateResponse.data && candidateResponse.data.candidate) {
          const candidate = candidateResponse.data.candidate;
          
          // L·∫•y th√¥ng tin HR t·ª´ localStorage
          const userString = localStorage.getItem('user');
          const user = userString ? JSON.parse(userString) : null;
          setHrInfo({
            name: user?.fullName || '[t√™n HR]'
          });
          
          // L∆∞u th√¥ng tin ph·ªèng v·∫•n n·∫øu c√≥
          if (interviewResponse.status === 200 && interviewResponse.data.length > 0) {
            const interview = interviewResponse.data[0];
            console.log('Upcoming interview:', interview);
            setUpcomingInterview(interview);
          } else {
            console.log('No upcoming interviews found');
          }

          // T·∫°o n·ªôi dung email m·∫´u
          const emailContent = candidate.stage === 'rejected' 
            ? `<div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
<h3 style="text-align: center; margin-bottom: 30px; color: #000066; font-size: 18px;">TH∆Ø C·∫¢M ∆†N ${candidate.name.toUpperCase() || '[H·ªå T√äN ·ª®NG VI√äN]'} ·ª®NG TUY·ªÇN ${candidate.position.toUpperCase() || '[V·ªä TR√ç TUY·ªÇN D·ª§NG]'}</h3>

<p>K√≠nh g·ª≠i: <strong>${candidate.name || '[anh/ch·ªã] [h·ªç t√™n ·ª©ng vi√™n]'}</strong>,</p>

<p>H·ªôi ƒë·ªìng Tuy·ªÉn d·ª•ng v√† Ban l√£nh ƒë·∫°o <strong>Rikkei Academy</strong> g·ª≠i l·ªùi c·∫£m ∆°n ƒë·∫øn <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> v√¨ ƒë√£ quan t√¢m v√† d√†nh th·ªùi gian ·ª©ng tuy·ªÉn v·ªã tr√≠ <strong>${candidate.position || '[T√™n v·ªã tr√≠ ·ª©ng tuy·ªÉn]'}</strong>.</p>

<p>Sau khi xem x√©t, <strong>Rikkei Academy</strong> ƒë√£ ƒë·ªëi t∆∞·ª£ng v·ªõi h·ªì s∆° ·ª©ng tuy·ªÉn c·ªßa <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong>, tuy nhi√™n do m·ªôt s·ªë ƒëi·ªÉm ch∆∞a ph√π h·ª£p, ch√∫ng t√¥i r·∫•t ti·∫øc v√¨ ch∆∞a th·ªÉ h·ª£p t√°c v·ªõi <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> trong th·ªùi gian n√†y.</p>

<p><strong>Rikkei Academy</strong> xin ph√©p l∆∞u h·ªì s∆° c·ªßa <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> cho nh·ªØng c∆° h·ªôi kh√°c trong t∆∞∆°ng lai. <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> c√≥ th·ªÉ gi·ªØ li√™n l·∫°c v·ªõi ch√∫ng t√¥i v√† c·∫≠p nh·∫≠t nh·ªØng th√¥ng tin ngh·ªÅ nghi·ªáp m·ªõi nh·∫•t t·∫°i <strong>Tuy·ªÉn d·ª•ng Rikkei Academy</strong>.</p>

<p>M·ªôt l·∫ßn n·ªØa r·∫•t c√°m ∆°n s·ª± quan t√¢m, th·ªùi gian v√† n·ªó l·ª±c c·ªßa <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong>. Ch√∫c <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> g·∫∑t h√°i nhi·ªÅu th√†nh c√¥ng trong s·ª± nghi·ªáp t∆∞∆°ng lai.</p>

<p style="margin-top: 30px;">Tr√¢n tr·ªçng c·∫£m ∆°n,</p>
<p style="margin-top: 10px;"><strong>TM. H·ªòI ƒê·ªíNG TUY·ªÇN D·ª§NG</strong></p>
</div>`
            : `<div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
<h3 style="text-align: center; margin-bottom: 30px; color: #000066; font-size: 18px;">TH∆Ø M·ªúI PH·ªéNG V·∫§N ${candidate.name.toUpperCase() || '[H·ªå T√äN ·ª®NG VI√äN]'} ·ª®NG TUY·ªÇN ${candidate.position.toUpperCase() || '[V·ªä TR√ç TUY·ªÇN D·ª§NG]'}</h3>

<p>K√≠nh g·ª≠i: <strong>${candidate.name || '[anh/ch·ªã] [h·ªç t√™n ·ª©ng vi√™n]'}</strong>,</p>

<p>C√¥ng ty TNHH <strong>Rikkei Education (Rikkei)</strong> r·∫•t c·∫£m ∆°n <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> ƒë√£ quan t√¢m ·ª©ng tuy·ªÉn v√†o v·ªã tr√≠ <strong>${candidate.position || '[t√™n v·ªã tr√≠ tuy·ªÉn d·ª•ng]'}</strong>.</p>

<p>Tr√¢n tr·ªçng m·ªùi <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> tham d·ª± bu·ªïi ph·ªèng v·∫•n t·∫°i Rikkei theo th√¥ng tin chi ti·∫øt nh∆∞ sau:</p>

<div style="margin: 30px 0; background-color: #f9f9f9; padding: 20px; border-radius: 5px;">
<p style="margin: 10px 0;">‚úî <strong>Th·ªùi gian:</strong> ${upcomingInterview ? `${moment(upcomingInterview.startTime).format('HH:mm')} - ${moment(upcomingInterview.endTime).format('HH:mm')}, ${moment(upcomingInterview.date).format('DD/MM/YYYY')}` : '[th·ªùi gian ph·ªèng v·∫•n]'}</p>
<p style="margin: 10px 0;">‚úî <strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${upcomingInterview?.location || 'T·∫ßng 7 th√°p A t√≤a S√¥ng ƒê√†, ƒë∆∞·ªùng Ph·∫°m H√πng, qu·∫≠n Nam T·ª´ Li√™m, H√† N·ªôi'}</p>
<p style="margin: 10px 0;">‚úî <strong>H√¨nh th·ª©c ph·ªèng v·∫•n:</strong> ${upcomingInterview?.eventType === 'offline' ? 'Tr·ª±c ti·∫øp' : 'Online'}</p>
<p style="margin: 10px 0;">‚úî <strong>Th·ªùi l∆∞·ª£ng:</strong> ${upcomingInterview ? `${Math.abs(moment(upcomingInterview.endTime).diff(moment(upcomingInterview.startTime), 'minutes'))} ph√∫t` : '30 - 45 ph√∫t'}</p>
<p style="margin: 10px 0;">‚úî <strong>Ng∆∞·ªùi li√™n h·ªá:</strong> ${hrInfo.name}</p>
</div>

<p style="margin-top: 20px;">üîπ <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> vui l√≤ng ph·∫£n h·ªìi l·∫°i email ƒë·ªÉ x√°c nh·∫≠n tham gia ph·ªèng v·∫•n.</p>
<p>üîπ C√°m ∆°n <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> ƒë√£ s·∫Øp x·∫øp ƒë·ªÉ c√≥ bu·ªïi trao ƒë·ªïi n√†y. Ch√∫c <strong>${candidate.name || '[Anh/Ch·ªã]'}</strong> c√≥ m·ªôt bu·ªïi ph·ªèng v·∫•n th√†nh c√¥ng!</p>

<p style="margin-top: 30px;">Tr√¢n tr·ªçng,</p>
<p style="margin-top: 10px;"><strong>TM. H·ªòI ƒê·ªíNG TUY·ªÇN D·ª§NG</strong></p>
</div>`;

          form.setFieldsValue({
            to: candidate.email,
            subject: candidate.stage === 'rejected'
              ? `[RIKKEI ACADEMY] TH∆Ø T·ª™ CH·ªêI _ ${candidate.name.toUpperCase()} _ ${candidate.position.toUpperCase()}`
              : `[RIKKEI ACADEMY] TH∆Ø M·ªúI ${candidate.name.toUpperCase()} CH·ª®C V·ª§ ·ª®NG TUY·ªÇN ${candidate.position.toUpperCase()} GIAI ƒêO·∫†N ${getStatusText(candidate.stage).toUpperCase()}`,
            content: emailContent
          });

          setCandidate(candidate);
        }
      } catch (error) {
        console.error('Error fetching candidate data:', error);
        message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ·ª©ng vi√™n');
      }
    };

    fetchCandidateData();
  }, [id, form]);

  // Th√™m useEffect ƒë·ªÉ c·∫≠p nh·∫≠t n·ªôi dung email khi upcomingInterview thay ƒë·ªïi
  useEffect(() => {
    if (candidate && upcomingInterview) {
      // T√≠nh th·ªùi l∆∞·ª£ng ph·ªèng v·∫•n
      const startTime = moment(upcomingInterview.startTime);
      const endTime = moment(upcomingInterview.endTime);
      
      // Ki·ªÉm tra v√† s·ª≠a l·∫°i th·ªùi gian n·∫øu c·∫ßn
      if (endTime.isBefore(startTime)) {
        endTime.add(1, 'day');
      }
      
      const duration = endTime.diff(startTime, 'minutes');
      
      const emailContent = `<div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
<h3 style="text-align: center; margin-bottom: 30px; color: #000066; font-size: 18px;">TH∆Ø M·ªúI PH·ªéNG V·∫§N ${candidate.name.toUpperCase()} ·ª®NG TUY·ªÇN ${candidate.position.toUpperCase()}</h3>

<p>K√≠nh g·ª≠i: <strong>${candidate.name}</strong>,</p>

<p>C√¥ng ty TNHH <strong>Rikkei Education (Rikkei)</strong> r·∫•t c·∫£m ∆°n <strong>${candidate.name}</strong> ƒë√£ quan t√¢m ·ª©ng tuy·ªÉn v√†o v·ªã tr√≠ <strong>${candidate.position}</strong>.</p>

<p>Tr√¢n tr·ªçng m·ªùi <strong>${candidate.name}</strong> tham d·ª± bu·ªïi ph·ªèng v·∫•n t·∫°i Rikkei theo th√¥ng tin chi ti·∫øt nh∆∞ sau:</p>

<div style="margin: 30px 0; background-color: #f9f9f9; padding: 20px; border-radius: 5px;">
<p style="margin: 10px 0;">‚úî <strong>Th·ªùi gian:</strong> ${moment(upcomingInterview.startTime).format('HH:mm')} - ${moment(upcomingInterview.endTime).format('HH:mm')}, ${moment(upcomingInterview.date).format('DD/MM/YYYY')}</p>
<p style="margin: 10px 0;">‚úî <strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${upcomingInterview.location || 'T·∫ßng 7 th√°p A t√≤a S√¥ng ƒê√†, ƒë∆∞·ªùng Ph·∫°m H√πng, qu·∫≠n Nam T·ª´ Li√™m, H√† N·ªôi'}</p>
<p style="margin: 10px 0;">‚úî <strong>H√¨nh th·ª©c ph·ªèng v·∫•n:</strong> ${upcomingInterview.eventType === 'offline' ? 'Tr·ª±c ti·∫øp' : 'Online'}</p>
<p style="margin: 10px 0;">‚úî <strong>Th·ªùi l∆∞·ª£ng:</strong> ${duration} ph√∫t</p>
<p style="margin: 10px 0;">‚úî <strong>Ng∆∞·ªùi li√™n h·ªá:</strong> ${hrInfo.name}</p>
</div>

<p style="margin-top: 20px;">üîπ <strong>${candidate.name}</strong> vui l√≤ng ph·∫£n h·ªìi l·∫°i email ƒë·ªÉ x√°c nh·∫≠n tham gia ph·ªèng v·∫•n.</p>
<p>üîπ C√°m ∆°n <strong>${candidate.name}</strong> ƒë√£ s·∫Øp x·∫øp ƒë·ªÉ c√≥ bu·ªïi trao ƒë·ªïi n√†y. Ch√∫c <strong>${candidate.name}</strong> c√≥ m·ªôt bu·ªïi ph·ªèng v·∫•n th√†nh c√¥ng!</p>

<p style="margin-top: 30px;">Tr√¢n tr·ªçng,</p>
<p style="margin-top: 10px;"><strong>TM. H·ªòI ƒê·ªíNG TUY·ªÇN D·ª§NG</strong></p>
</div>`;

      form.setFieldsValue({
        content: emailContent
      });
    }
  }, [candidate, upcomingInterview, hrInfo, form]);

  useEffect(() => {
    if (candidate?.stage === 'hired') {
      // T·∫°o m·∫≠t kh·∫©u random 8 k√Ω t·ª±
      const generatePassword = () => {
        const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
        let password = "";
        for (let i = 0; i < 8; i++) {
          const randomIndex = Math.floor(Math.random() * charset.length);
          password += charset[randomIndex];
        }
        return password;
      };

      const randomPassword = generatePassword();

      const hiredTemplate = `
<div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
<h3 style="text-align: center; margin-bottom: 30px; color: #000066; font-size: 18px;">TH∆Ø M·ªúI NH·∫¨N VI·ªÜC</h3>

<p>K√≠nh g·ª≠i: <strong>${candidate.gender === 'female' ? 'Ch·ªã' : 'Anh'} ${candidate.name}</strong>,</p>

<p>H·ªôi ƒë·ªìng Tuy·ªÉn d·ª•ng v√† Ban l√£nh ƒë·∫°o <strong>Rikkei Academy</strong> ch√¢n th√†nh c·∫£m ∆°n ${candidate.gender === 'female' ? 'ch·ªã' : 'anh'} ƒë√£ d√†nh th·ªùi gian qu√Ω b√°u ƒë·∫øn trao ƒë·ªïi c√¥ng vi·ªác t·∫°i c√¥ng ty ch√∫ng t√¥i. H·ªôi ƒë·ªìng tuy·ªÉn d·ª•ng v√† Ban l√£nh ƒë·∫°o c√¥ng ty ghi nh·∫≠n nƒÉng l·ª±c v√† l√≤ng nhi·ªát th√†nh c·ªßa ${candidate.gender === 'female' ? 'ch·ªã' : 'anh'}.</p>

<p>Ban l√£nh ƒë·∫°o C√¥ng ty tr√¢n tr·ªçng m·ªùi ${candidate.gender === 'female' ? 'ch·ªã' : 'anh'} c·ªông t√°c c√πng ch√∫ng t√¥i v·ªõi c√°c th√¥ng tin chi ti·∫øt nh∆∞ sau:</p>

<div style="margin: 30px 0; display: grid; grid-template-columns: 200px 1fr; gap: 10px; background-color: #ffffff; border: 1px solid #e0e0e0;">
  <div style="padding: 8px 12px; background-color: #f5f5f5; border-bottom: 1px solid #e0e0e0;"><strong>Ch·ª©c danh:</strong></div>
  <div style="padding: 8px 12px; border-bottom: 1px solid #e0e0e0;">${candidate.position}</div>
  
  <div style="padding: 8px 12px; background-color: #f5f5f5; border-bottom: 1px solid #e0e0e0;"><strong>B·ªô ph·∫≠n - Ph√≤ng ban:</strong></div>
  <div style="padding: 8px 12px; border-bottom: 1px solid #e0e0e0;">${candidate.department || 'C√¥ng ·ª©ng ngu·ªìn nh√¢n l·ª±c'}</div>
  
  <div style="padding: 8px 12px; background-color: #f5f5f5; border-bottom: 1px solid #e0e0e0;"><strong>Th·ªùi gian l√†m vi·ªác:</strong></div>
  <div style="padding: 8px 12px; border-bottom: 1px solid #e0e0e0;">8h00 - 17h30 t·ª´ th·ª© 2 - th·ª© 6</div>
  
  <div style="padding: 8px 12px; background-color: #f5f5f5; border-bottom: 1px solid #e0e0e0;"><strong>ƒê·ªãa ƒëi·ªÉm l√†m vi·ªác:</strong></div>
  <div style="padding: 8px 12px; border-bottom: 1px solid #e0e0e0;">T·∫ßng 7, T√≤a nh√† S√¥ng ƒê√†, Ph·∫°m H√πng, Nam T·ª´ Li√™m, H√† N·ªôi</div>
  
  <div style="padding: 8px 12px; background-color: #f5f5f5; border-bottom: 1px solid #e0e0e0;"><strong>M·ª©c l∆∞∆°ng ch√≠nh th·ª©c:</strong></div>
  <div style="padding: 8px 12px; border-bottom: 1px solid #e0e0e0;">${candidate.salary || '2.000.000'} VNƒê/th√°ng l∆∞∆°ng</div>
  
  <div style="padding: 8px 12px; background-color: #f5f5f5; border-bottom: 1px solid #e0e0e0;"><strong>Ph·ª• c·∫•p:</strong></div>
  <div style="padding: 8px 12px; border-bottom: 1px solid #e0e0e0;">V√© xe th√°ng t·∫°i c√¥ng ty</div>
  
  <div style="padding: 8px 12px; background-color: #f5f5f5;"><strong>Ng√†y nh·∫≠n vi·ªác:</strong></div>
  <div style="padding: 8px 12px;">${moment(candidate.startDate).format('DD-MM-YY') || '05-08-24'}</div>
</div>

<br/>

<div style="background-color: #fff9e6; padding: 15px; margin: 20px 0;">
<p><span style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">${candidate.gender === 'female' ? 'Ch·ªã' : 'Anh'} vui l√≤ng tr·∫£ l·ªùi x√°c nh·∫≠n & ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng, ho√†n th√†nh form th√¥ng tin nh√¢n s·ª± theo t√†i kho·∫£n ƒë∆∞·ª£c c·∫•p d∆∞·ªõi ƒë√¢y tr∆∞·ªõc 23h ng√†y ${moment(candidate.startDate).subtract(2, 'days').format('DD/MM/YYYY')}.</span></p>

<p><span style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><strong>T√™n ƒëƒÉng nh·∫≠p:</strong> ${candidate.email}</span></p>
<p><span style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><strong>M·∫≠t kh·∫©u:</strong> ${randomPassword}</span></p>
</div>

<br/>

<p>Ch√∫ng t√¥i hoan ngh√™nh nh·ªØng ƒë√≥ng g√≥p c·ªßa ${candidate.gender === 'female' ? 'ch·ªã' : 'anh'} v√†o s·ª± nghi·ªáp ph√°t tri·ªÉn c·ªßa C√¥ng ty. Khi t·ªõi nh·∫≠n vi·ªác, ƒë·ªÅ ngh·ªã ${candidate.gender === 'female' ? 'ch·ªã' : 'anh'} d√†nh th·ªùi gian t√¨m hi·ªÉu th√™m c√°c th√¥ng tin v·ªÅ T·ªï ch·ª©c, m√¥ t·∫£ c√¥ng vi·ªác c·ªßa m√¨nh, m·∫∑c trang ph·ª•c l·ªãch s·ª±, ph√π h·ª£p v·ªõi m√¥i tr∆∞·ªùng c√¥ng s·ªü, mang laptop c√° nh√¢n ƒë·ªÉ ph·ª•c v·ª• c√¥ng vi·ªác.</p>

<p style="margin-top: 20px;">M·ªçi th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá <strong>Ms.Duy√™n(HR): 0385324236</strong></p>

<p style="margin-top: 30px;">Tr√¢n tr·ªçng,</p>
<p style="margin-top: 10px;"><strong>TM. H·ªòI ƒê·ªíNG TUY·ªÇN D·ª§NG</strong></p>
</div>`;

      form.setFieldsValue({
        content: hiredTemplate,
        subject: `[RIKKEI ACADEMY] X√ÅC NH·∫¨N TH∆Ø M·ªúI NH·∫¨N VI·ªÜC - ${candidate.name.toUpperCase()} - ${candidate.position.toUpperCase()}`
      });
    }
  }, [candidate, form]);

  // File upload configuration
  const uploadProps = {
    name: 'attachments',
    multiple: true,
    fileList: fileList,
    beforeUpload: (file) => {
      const isLt10M = file.size / 1024 / 1024 < 10;
      if (!isLt10M) {
        message.error('File ph·∫£i nh·ªè h∆°n 10MB!');
        return Upload.LIST_IGNORE;
      }
      return false; // Prevent auto upload
    },
    onChange: (info) => {
      setFileList(info.fileList);
    },
    onRemove: (file) => {
      const index = fileList.indexOf(file);
      const newFileList = fileList.slice();
      newFileList.splice(index, 1);
      setFileList(newFileList);
    },
  };

  const handleSubmit = async (values) => {
    if (sendCount > 0) {
      setPendingSubmit(values);
      setShowConfirmModal(true);
      return;
    }

    await submitEmail(values);
  };

  const submitEmail = async (values) => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      console.log('Starting email submission with values:', values);
      
      // Create FormData for file upload
      const formData = new FormData();
      formData.append('to', values.to);
      
      // Handle CC emails
      if (values.cc && values.cc.length > 0) {
        formData.append('cc', values.cc.join(','));
      }
      
      // Handle BCC emails
      if (values.bcc && values.bcc.length > 0) {
        formData.append('bcc', values.bcc.join(','));
      }
      
      formData.append('subject', values.subject);
      formData.append('content', values.content || '');
      
      // Append files if any
      if (fileList && fileList.length > 0) {
        fileList.forEach((file) => {
          formData.append('attachments', file.originFileObj);
        });
      }

      console.log('Sending email request...');
      const response = await axios.post('http://localhost:8000/api/emails/send', formData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'multipart/form-data',
        }
      });

      console.log('Email send response:', response);

      if (response.status === 200) {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i email c·ªßa ·ª©ng vi√™n
        if (id) {
          try {
            console.log('Updating email status for candidate:', id);
            const updateResponse = await axios.patch(
              `http://localhost:8000/api/candidates/${id}/email-status`,
              { emailStatus: 'ƒê√£ g·ª≠i' },
              {
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                }
              }
            );

            console.log('Email status update response:', updateResponse);

            if (updateResponse.status === 200) {
              message.success('Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
              setSendCount(prev => prev + 1);
              
              // Chuy·ªÉn h∆∞·ªõng sau khi c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
              if (location.pathname.includes('/candidates/')) {
                navigate(`/candidates/${id}`);
              } else {
                navigate('/emails');
              }
            }
          } catch (error) {
            console.error('Error updating email status:', error);
            console.error('Error response:', error.response);
            message.error('Email ƒë√£ ƒë∆∞·ª£c g·ª≠i nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i');
          }
        } else {
          message.success('Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
          navigate('/emails');
        }
      }
    } catch (error) {
      console.error('Error sending email:', error);
      console.error('Error response:', error.response);
      const errorMessage = error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i email';
      message.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleConfirmSend = () => {
    setShowConfirmModal(false);
    if (pendingSubmit) {
      submitEmail(pendingSubmit);
      setPendingSubmit(null);
    }
  };

  const handleCancelSend = () => {
    setShowConfirmModal(false);
    setPendingSubmit(null);
    navigate(-1);
  };

  return (
    <div className="min-h-screen bg-[#F9FAFB] p-4 ml-[282px]">
      <div className="max-w-[1200px] mx-auto bg-white rounded-lg p-6 mt-[80px]">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <Button 
              icon={<ArrowLeftOutlined />} 
              onClick={() => navigate(id ? `/candidates/${id}` : '/emails')}
              className="border-none"
            >
              Quay l·∫°i
            </Button>
            <h1 className="text-[20px] font-medium text-[#1A1A1A] m-0">Th∆∞ m·ªõi</h1>
          </div>
        </div>

        {/* Email Form */}
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          className="bg-white rounded-lg"
        >
          {/* Recipients */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-center">
              <span className="w-20 text-[#666]">ƒê·∫øn:</span>
              <Form.Item 
                name="to" 
                className="mb-0 flex-1"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p email ng∆∞·ªùi nh·∫≠n' }]}
              >
                <Input 
                  variant="borderless"
                  readOnly={!!id}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email ng∆∞·ªùi nh·∫≠n"
                />
              </Form.Item>
            </div>
          </div>

          {/* CC */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-center">
              <span className="w-20 text-[#666]">CC:</span>
              <Form.Item name="cc" className="mb-0 flex-1">
                <Select
                  mode="tags"
                  style={{ width: '100%' }}
                  placeholder="Nh·∫≠p email CC"
                  tokenSeparators={[',']}
                  variant="borderless"
                />
              </Form.Item>
            </div>
          </div>

          {/* BCC */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-center">
              <span className="w-20 text-[#666]">BCC:</span>
              <Form.Item name="bcc" className="mb-0 flex-1">
                <Select
                  mode="tags"
                  style={{ width: '100%' }}
                  placeholder="Nh·∫≠p email BCC"
                  tokenSeparators={[',']}
                  variant="borderless"
                />
              </Form.Item>
            </div>
          </div>

          {/* Subject */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-center">
              <span className="w-20 text-[#666]">Ti√™u ƒë·ªÅ:</span>
              <Form.Item 
                name="subject" 
                className="mb-0 flex-1"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ' }]}
              >
                <Input 
                  variant="borderless"
                  readOnly={!!id}
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ email"
                />
              </Form.Item>
            </div>
          </div>

          {/* File Upload */}
          <div className="border-b border-[#f0f0f0] p-4">
            <div className="flex items-start">
              <span className="w-20 text-[#666] mt-2">ƒê√≠nh k√®m:</span>
              <div className="flex-1">
                <Upload {...uploadProps}>
                  <Button icon={<InboxOutlined />}>Ch·ªçn file</Button>
                </Upload>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="p-4">
            <Form.Item
              name="content"
              rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p n·ªôi dung email' }]}
            >
              <ReactQuill 
                theme="snow"
                value={emailContent}
                onChange={setEmailContent}
                modules={modules}
                formats={formats}
                style={{ 
                  height: '300px',
                  marginBottom: '50px'
                }}
              />
            </Form.Item>
          </div>

          {/* Actions */}
          <div className="flex justify-end gap-4 mt-8">
            <Button onClick={() => navigate(-1)}>
              H·ªßy
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              icon={<SendOutlined />}
              loading={loading}
              className="bg-[#1890ff]"
            >
              G·ª≠i
            </Button>
          </div>
        </Form>
      </div>

      {/* Confirmation Modal */}
      <Modal
        title="X√°c nh·∫≠n g·ª≠i email"
        open={showConfirmModal}
        onOk={handleConfirmSend}
        onCancel={handleCancelSend}
        okText="Ti·∫øp t·ª•c g·ª≠i"
        cancelText="H·ªßy b·ªè"
      >
        <p>B·∫°n ƒë√£ g·ª≠i email cho ·ª©ng vi√™n n√†y tr∆∞·ªõc ƒë√≥. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ª≠i l·∫°i?</p>
      </Modal>
    </div>
  );
};

export default SendEmail; 